import { useEffect, useState } from "react";
import { generateClient } from "aws-amplify/api";
import { createPost } from "./graphql/mutations";
import { listPosts } from "./graphql/queries";
import { CreatePostInput, Post } from "./API";
import { withAuthenticator, Button, Heading } from "@aws-amplify/ui-react";
import "@aws-amplify/ui-react/styles.css";
import { type AuthUser } from "aws-amplify/auth";
import { type UseAuthenticator } from "@aws-amplify/ui-react-core";

const initialState: CreatePostInput = { title: "" };
const client = generateClient();

type AppProps = {
  signOut?: UseAuthenticator["signOut"]; //() => void;
  user?: AuthUser;
};

const App: React.FC<AppProps> = ({ signOut, user }) => {
  const [formState, setFormState] = useState<CreatePostInput>(initialState);
  const [posts, setPosts] = useState<Post[]>([]);

  useEffect(() => {
    fetchPosts();
  }, []);

  async function fetchPosts() {
    try {
      const postData = await client.graphql({
        query: listPosts,
      });
      const posts = postData.data.listPosts.items;
      setPosts(posts);
    } catch (err) {
      console.log("error fetching posts");
    }
  }

  async function addPost() {
    try {
      if (!formState.title) return;

      // Add default values for missing properties
      const post: Post = {
        __typename: "Post",
        id: "", // Assign an empty string for now, as it will be generated by the backend
        title: formState.title,
        blogPostsId: null,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      setPosts([...posts, post]);
      setFormState(initialState);
      await client.graphql({
        query: createPost,
        variables: {
          input: post,
        },
      });
    } catch (err) {
      console.log("error creating post:", err);
    }
  }

  return (
    <div style={styles.container}>
      <Heading level={1}>
        Hello{" "}
        {user?.username &&
          user.username.charAt(0).toUpperCase() + user.username.slice(1)}
        {"!"}
      </Heading>
      <Button onClick={signOut}>Sign out</Button>
      <h2>Amplify Blog Posts</h2>
      <input
        onChange={(event) =>
          setFormState({ ...formState, title: event.target.value })
        }
        style={styles.input}
        value={formState.title}
        placeholder="Title"
      />
      <button style={styles.button} onClick={addPost}>
        Create Post
      </button>
      {posts.map((post, index) => (
        <div key={post.id ? post.id : index} style={styles.post}>
          <p style={styles.postName}>{post.title}</p>
        </div>
      ))}
    </div>
  );
};

const styles = {
  container: {
    width: "400px",
    margin: "0 auto",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    padding: 20,
  },
  post: { marginBottom: 15 },
  input: {
    border: "none",
    backgroundColor: "#ddd",
    marginBottom: 10,
    padding: 8,
    fontSize: 18,
  },
  postName: { fontSize: 20, fontWeight: "bold" },
  button: {
    backgroundColor: "black",
    color: "white",
    outline: "none",
    fontSize: 18,
    padding: "12px 0px",
  },
} as const;

const AuthenticatedApp = withAuthenticator(App);
export default AuthenticatedApp;
